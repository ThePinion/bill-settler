// AUTO-GENERATED by yerpc-derive

import * as T from "./types.js"
import * as RPC from "./jsonrpc.js"

type RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;
type NotificationMethod = (method: string, params?: RPC.Params) => void;

interface Transport {
  request: RequestMethod,
  notification: NotificationMethod
}

export class RawClient {
  constructor(private _transport: Transport) {}


  public helloWorld(): Promise<string> {
    return (this._transport.request('hello_world', [] as RPC.Params)) as Promise<string>;
  }


  public addUser(payload: T.AddUserRequest): Promise<T.User> {
    return (this._transport.request('add_user', [payload] as RPC.Params)) as Promise<T.User>;
  }


  public trustUsers(payload: T.TrustUsersRequest): Promise<null> {
    return (this._transport.request('trust_users', [payload] as RPC.Params)) as Promise<null>;
  }


  public addGroup(payload: T.AddGroupRequest): Promise<T.Group> {
    return (this._transport.request('add_group', [payload] as RPC.Params)) as Promise<T.Group>;
  }


  public addGroupPerson(payload: T.AddGroupPersonRequest): Promise<T.GroupPerson> {
    return (this._transport.request('add_group_person', [payload] as RPC.Params)) as Promise<T.GroupPerson>;
  }


  public addExpense(payload: T.AddExpenseRequest): Promise<T.Expense> {
    return (this._transport.request('add_expense', [payload] as RPC.Params)) as Promise<T.Expense>;
  }


}
